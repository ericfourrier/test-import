#!/bin/bash

set -e

UBPORTS_HOME=${UBPORTS_HOME:=$HOME/UBports}
UBPORTS_REPO=${UBPORTS_REPO:=1}
CONTAINER=${CONTAINER:=dekko}
TARGET=${TARGET:=ubuntu:16.04}
SERIES=${SERIES:=xenial}
USER_UID=$(id -u)
USER_GID=$(id -g)
TYPE=dev
CONTAINER_NAME=$CONTAINER-$TYPE

function info_msg() {
    echo -e "\033[1;32m [ ${CONTAINER_NAME} ] $1\033[0m"
}

function error_msg() {
    echo -e "\033[0;31m [ ${CONTAINER_NAME} ] $1\033[0m"
}

function cmd() { echo `basename $0`; }

function usage() {
    echo "\
    `cmd` [OPTIONS...] CONTAINER (default: ubports-(dev/cross)
    -d, --dev; Create a development container
    -c, --cross; Create a cross build container
    -t, --target; What lxc image to use (default: $TARGET)
    " | column -t -s ";"
}

function error() {
    error_msg "`cmd`: invalid option -- '$1'";
    echo "Try '`cmd` -h' for more info";
    exit 1;
}

function create_ubports_directory() {
    info_msg "Creating UBports home directory"
    mkdir -p ${UBPORTS_HOME}/Projects
    mkdir -p ${UBPORTS_HOME}/Tools
    mkdir -p ${UBPORTS_HOME}/Examples
    mkdir -p ${UBPORTS_HOME}/.ubports

    if [ -d "${HOME}/.ssh" ]; then
        info_msg "Linking ssh keys"
        cp -r ${HOME}/.ssh ${UBPORTS_HOME}
    fi

    if [ -f "${HOME}/.gitconfig" ]; then
        info_msg "Copying gitconfig"
        cp ${HOME}/.gitconfig ${UBPORTS_HOME}
    fi

    ls -al ${UBPORTS_HOME}
}

function check_lxd_init() {
   lxc profile device show default | grep nic > /dev/null

   if [ $? -ne 0 ]; then
      error_msg "You need to run 'sudo lxd init' and reboot before continuing"
      exit 1;
   else
      info_msg "default lxd profile already configured";
   fi
}

function check_uid_gid() {
    uidvalue="root:${USER_UID}:1"
    gidvalue="root:${USER_GID}:1"

    if grep -Fxq "$uidvalue" /etc/subuid
    then
        echo "Already set"
    else
        echo "$uidvalue" | sudo tee -a /etc/subuid
        echo "$gidvalue" | sudo tee -a /etc/subgid
    fi
}

function run_exec() {
    lxc exec $CONTAINER_NAME -- sh -c "$1"
}

function run_exec_user() {
    lxc exec $CONTAINER_NAME -- sudo --login --user ubuntu sh -c "$1"
}

function create_base_container() {
    lxc init $TARGET $CONTAINER_NAME
    lxc config set $CONTAINER_NAME raw.idmap "both ${USER_UID} ${USER_GID}"
    lxc config device add $CONTAINER_NAME homedir disk source=${UBPORTS_HOME} path=/home/ubuntu
    lxc config set $CONTAINER_NAME raw.lxc "lxc.apparmor.profile=unconfined"
    lxc config set $CONTAINER_NAME security.privileged "true"
}

function configure_cross_build() {
    info_msg "Installing host dependencies";
    sudo apt install debootstrap rsync qemu-user-static binfmt-support -y

    info_msg "Sources.list changed to:"
    run_exec "echo \"deb [arch=amd64] http://archive.ubuntu.com/ubuntu ${SERIES} main resticted multiverse universe\" > /etc/apt/sources.list && \
        echo \"deb [arch=amd64] http://archive.ubuntu.com/ubuntu ${SERIES}-updates main resticted multiverse universe\" >> /etc/apt/sources.list && \
        echo \"deb [arch=amd64] http://archive.ubuntu.com/ubuntu ${SERIES}-security main resticted multiverse universe\" >> /etc/apt/sources.list && \
        echo \"deb [arch=armhf] http://ports.ubuntu.com/ubuntu-ports ${SERIES} main resticted multiverse universe\" >> /etc/apt/sources.list && \
        echo \"deb [arch=armhf] http://ports.ubuntu.com/ubuntu-ports ${SERIES}-updates main resticted multiverse universe\" >> /etc/apt/sources.list && \
        echo \"deb [arch=armhf] http://ports.ubuntu.com/ubuntu-ports ${SERIES}-security main restricted multiverse universe\" >> /etc/apt/sources.list"

    run_exec "cat /etc/apt/sources.list"
    echo "---------------"

    info_msg "Adding armhf arhitecture"
    run_exec "dpkg --add-architecture armhf && apt-get update"
}

function configure_dev_container() {
    lxc config device add $CONTAINER_NAME X0 disk path=/tmp/.X11-unix/X0 source=/tmp/.X11-unix/X0
    lxc config device add $CONTAINER_NAME Xauthority disk path=/home/ubuntu/.Xauthority source=${XAUTHORITY}
    lxc config device add $CONTAINER_NAME mygpu gpu
    lxc config device set $CONTAINER_NAME mygpu uid ${USER_UID}
    lxc config device set $CONTAINER_NAME mygpu gid ${USER_GID}
}

function configure_user_dev_container() {
    info_msg "Configuring X11 display"
    run_exec_user "echo \"export DISPLAY=:0\" >> ~/.profile"
    # NOTE: For sound to work you need to install paprefs and tick "Enable network access to local sound devices"
    # in the "Network Server" tab
    info_msg "Configuring audio"
    run_exec_user "mkdir -p /home/ubuntu/.config/pulse/ && \
        echo export PULSE_SERVER=\"tcp:`ip route show 0/0 | awk '{print $3}'`\" >> ~/.profile && \
        echo export PULSE_COOKIE=/home/ubuntu/.config/pulse/cookie >> ~/.profile"
    lxc config device add $CONTAINER_NAME PACookie disk path=/home/ubuntu/.config/pulse/cookie source=/home/${USER}/.config/pulse/cookie
    info_msg "Setting up adb device passthrough for known devices. PR's welcome to add more"
    run_exec "mkdir ~/.android && touch ~/.android/adb_usb.ini"
    run_exec "echo \"0x2a47\" | tee -a ~/.android/adb_usb.ini"
    lxc config device add $CONTAINER_NAME bqe45 usb vendorid=2a47
    run_exec "echo \"0x2a45\" | tee -a ~/.android/adb_usb.ini"
    lxc config device add $CONTAINER_NAME mx4 usb vendorid=2a45
    run_exec "echo \"0x18d1\" | tee -a ~/.android/adb_usb.ini"
    lxc config device add $CONTAINER_NAME nexus usb vendorid=18d1
    run_exec "echo \"0x05c6\" | tee -a ~/.android/adb_usb.ini"
    lxc config device add $CONTAINER_NAME opo usb vendorid=05c6
}

function add_ubports_repo() {
    info_msg "Adding ubports repo"
    run_exec "echo \"deb http://repo.ubports.com ${SERIES} main\" >> /etc/apt/sources.list"
    run_exec "echo \"deb http://repo.ubports.com ${SERIES}_-_amd64 main\" >> /etc/apt/sources.list"
    run_exec "wget -qO - http://repo.ubports.com/keyring.gpg | apt-key add -"
    info_msg "Pinning ubports repo"
    run_exec "echo \"Package: *\" > /etc/apt/preferences.d/ubports.pref && \
        echo \"Pin: origin repo.ubports.com\" >> /etc/apt/preferences.d/ubports.pref && \
        echo \"Pin-Priority: 2000\" >> /etc/apt/preferences.d/ubports.pref"
}

function install_dev_libs() {
    info_msg "Installing sdk packages"
    run_exec "apt-get -y --no-install-recommends install \
        apt-utils \
        build-essential \
        cmake \
        fakeroot \
        libc-dev \
        isc-dhcp-client \
        net-tools \
        ifupdown \
        clang \
        pkg-config \
        ubuntu-sdk-libs \
        qt5-doc \
        qtcreator \
        qbs \
        language-pack-en \
        click \
        dbus \
        dbus-x11 \
        xdg-utils \
        chromium-browser \
        python3 \
        python3-dev \
        python3-pip \
        qml-module-io-thp-pyotherside \
        phablet-tools \
        android-tools-adb \
        libsnappy-dev \
        qtpim5-dev \
        qml-module-qtcontacts \
        qttools5-dev-tools \
        libconnectivity-qt1-dev \
        libaccounts-qt5-dev \
        libgsettings-qt-dev \
        qtdeclarative5-private-dev \
        qml-module-qtquick-privatewidgets \
        qtbase5-private-dev \
        qtbase5-dev \
        qtbase5-dev-tools \
        libunity-dev \
        libmessaging-menu-dev \
        libnotify-dev \
        qml-module-qtqml-statemachine \
        xvfb \
        libqt5svg5-dev \
        qml-module-qtquick-dialogs \
        libsignon-qt5-dev \
        libsasl2-dev \
        signon-plugin-sasl-dev \
        signon-plugin-oauth2-dev \
        qbs \
        liboxideqt-qmlplugin \
        qml-module-ubuntu-web \
        qtdeclarative5-ubuntu-ui-extras0.2"
}

function install_cross_build_libs() {

    info_msg "Installing sdk packages"
    run_exec "apt-get -y --no-install-recommends install \
        apt-utils \
        build-essential \
        cmake \
        dpkg-cross \
        fakeroot \
        libc-dev:armhf \
        isc-dhcp-client \
        net-tools \
        ubuntu-sdk-libs \
        intltool:armhf \
        qttools5-dev-tools \
        qt5-doc \
        language-pack-en \
        click \
        qemu-user-static \
        binfmt-support \
        libconnectivity-qt1-dev:armhf \
        libaccounts-qt5-dev:armhf \
        qtdeclarative5-private-dev:armhf \
        qtbase5-private-dev:armhf \
        qtbase5-dev:armhf \
        libqt5svg5-dev:armhf \
        libsignon-qt5-dev:armhf \
        libsasl2-dev:armhf \
        signon-plugin-sasl-dev:armhf \
        signon-plugin-oauth2-dev:armhf \
        libsnappy-dev:armhf \
        qemu-user-static \
        python3-dev \
        python3-pip \
        git \
        zlib1g-dev \
        libsnappy-dev:armhf
        "
}

function install_clickable_stuffs() {
    info_msg "Installing clickable and docker (yes it works in lxd X-) )"
    run_exec "add-apt-repository -y ppa:bhdouglass/clickable && apt-get update && \
        apt-get -y --no-install-recommends install docker.io clickable"
    info_msg "Setting up clickable docker"
    run_exec_user "clickable setup-docker"
    info_msg "Restarting container"
    lxc restart $CONTAINER_NAME
    sleep 30
}

function setup_dekko() {
    info_msg "Setting up dekko project"
    run_exec_user "cd /home/ubuntu/Projects && git clone https://gitlab.com/dekkoproject/dekko.git"
    run_exec_user "cd /home/ubuntu/Projects/dekko && git submodule update --init"
    info_msg "Done"
}

while [ "$1" != "" ]; do
    PARAM=`echo $1 | awk -F= '{print $1}'`
    VALUE=`echo $1 | awk -F= '{print $2}'`
    case $PARAM in
        -h | --help)
            usage
            exit
            ;;
        -d | --dev)
            TYPE=dev
            ;;
        -c | --cross)
            TYPE=cross
            ;;
        -t | --target)
            TARGET=$VALUE
            ;;
        *)
            CONTAINER=$PARAM
            ;;
    esac
    shift
done


if [ $TYPE == "cross" ]; then
    CONTAINER_NAME=$CONTAINER-$TYPE
else
    CONTAINER_NAME=$CONTAINER
fi

if [ ! -d "$UBPORTS_HOME" ]; then
    create_ubports_directory
fi

check_lxd_init

check_uid_gid

create_base_container

if [ $TYPE == "dev" ]; then
    configure_dev_container
fi

info_msg "Starting container..."
lxc start $CONTAINER_NAME
sleep 30

if [ $TYPE == "cross" ]; then
    configure_cross_build
fi

add_ubports_repo

info_msg "Running full upgrade"
run_exec "apt-get update && apt-get -y --no-install-recommends --allow-downgrades dist-upgrade"

if [ $TYPE == "cross" ]; then
    install_cross_build_libs
fi

if [ $TYPE == "dev" ]; then
    install_dev_libs
    install_clickable_stuffs
    setup_dekko
    configure_user_dev_container
fi

info_msg "Restarting container"
lxc restart $CONTAINER_NAME
sleep 10

info_msg "Good to go.. \o/"
